import cv2
import numpy as np
import matplotlib.pyplot as plt
from segment_anything import sam_model_registry, SamPredictor

def visualize_extraction(image_rgb, input_box, mask):
    # 1. Bounding Box 이미지
    boxed_img = image_rgb.copy()
    x0, y0, x1, y1 = input_box[0]
    cv2.rectangle(boxed_img, (x0, y0), (x1, y1), color=(255, 0, 0), thickness=2)  # 빨간 박스

    # 2. Extracted 이미지 (검정 배경 위에 마스크된 부분만 추출)
    extracted = np.zeros_like(image_rgb)
    for c in range(3):  # R, G, B 채널 각각에 마스크 적용
        extracted[:, :, c] = image_rgb[:, :, c] * mask

    # 3. 시각화
    fig, axes = plt.subplots(1, 3, figsize=(15, 5))

    titles = ['Original', 'Bounding Box', 'Extracted Minerals']
    images = [image_rgb, boxed_img, extracted]

    for ax, title, img in zip(axes, titles, images):
        ax.imshow(img)
        ax.set_title(title)
        ax.axis('off')

    plt.tight_layout()
    plt.show()

# === 1. 이미지 불러오기 ===
image_path = "C:/Users/Admin/Desktop/photo/CoreSample/Mineral Image/_108285688_gettyimages-667308604.jpg"
image_bgr = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)

# === 2. 박스 직접 지정 (드래그 앤 드롭) ===
roi = cv2.selectROI("Drag to select a box, press ENTER", image_bgr, fromCenter=False, showCrosshair=True)
cv2.destroyAllWindows()
x, y, w, h = roi
input_box = np.array([[x, y, x + w, y + h]])

# === 3. SAM 모델 로딩 ===
checkpoint_path = "C:/Users/Admin/Downloads/sam_vit_h_4b8939.pth"
sam = sam_model_registry["vit_h"](checkpoint=checkpoint_path)
sam.to("cuda")
predictor = SamPredictor(sam)

# === 4. 이미지 세팅 & 예측 ===
predictor.set_image(image_rgb)
masks, scores, logits = predictor.predict(box=input_box, multimask_output=False)
mask = masks[0]

# === 5. 결과 시각화 ===
plt.figure(figsize=(10, 10))
plt.imshow(image_rgb)
plt.imshow(mask, alpha=0.5, cmap='jet')
plt.gca().add_patch(plt.Rectangle((x, y), w, h, edgecolor='lime', facecolor='none', lw=2))
plt.title("Mask from Drag-and-Drop Box")
plt.axis('off')
plt.show()

# 박스는 반드시 int로 캐스팅
input_box = np.array([[x, y, x + w, y + h]]).astype(int)

# 마스크는 SAM의 output에서 가져온 것 (mask = masks[0])
visualize_extraction(image_rgb, input_box, mask)
